import { Scenes } from 'telegraf';

import * as constants from '../constants.js';
import * as db from '../database/database.js';
import * as analytics from '../analytics/analytics.js';
import log from '../logger/logger.js';

const SEPARATOR = '.'

const addWordScene = new Scenes.WizardScene(
    constants.SCENE_ID_ADD_WORD,
    async (ctx) => {
        log.debug(`Entered scene ${constants.SCENE_ID_ADD_WORD}`);
        const firstLine = '–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ç–≤–æ–π —Å–ª–æ–≤–∞—Ä—å –∏ –≤ –æ–±—â—É—é –±–∞–∑—É.';
        const secondLine = '–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ, –ø–µ—Ä–µ–≤–æ–¥—ã (2-4 —à—Ç) –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥. –°–ª–æ–≤–∞ –ø–∏—à–∏ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã. –†–∞–∑–¥–µ–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ç–æ—á–∫–æ–π. –û—Ç–ø—Ä–∞–≤—å –≤—Å—ë –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ.';
        const example = '–ü—Ä–∏–º–µ—Ä:\nLotnisko\n–ê—ç—Ä–æ–ø–æ—Ä—Ç. –õ—ë—Ç—á–∏–∫. –õ–æ—Ç–µ—Ä–µ—è. –õ–æ—Ç\n–ê—ç—Ä–æ–ø–æ—Ä—Ç';
        const reply = `${firstLine}\n\n${secondLine}\n\n${example}`;
        await ctx.reply(reply);
        ctx.wizard.state.word = {};
        return ctx.wizard.next();
    },
    async (ctx) => {
        log.debug(`Received ${ctx.message.text}`);
        const array = ctx.message.text.split('\n');
        if (array.length < 3) {
            await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –°–ª–æ–≤–æ, –ø–µ—Ä–µ–≤–æ–¥—ã –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –í–µ—Å—å —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ.');
            return;
        }
        const word = array[0].trim().replace(/^\.+|\.+$/g, ''); // Trim trailing or leading dot
        const translations = array[1]
            .split(`${SEPARATOR} `)
            .map(s => s.trim()) // Trim whitespaces
            .map(s => s.replace(/^\.+|\.+$/g, '')) // Remove trailing or leading dot
        const rightTranslation = array[2].trim().replace(/^\.+|\.+$/g, ''); // Trim trailing or leading dot

        ctx.wizard.state.word.origin = word;
        
        if (translations.count <= 2 || translations.count > 4) {
            await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–µ—Ä–µ–≤–æ–¥—ã –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª—è—Ç—å —Ç–æ—á–∫–æ–π. –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 2—É—Ö –¥–æ 4–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –í–µ—Å—å —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ.');
            return;
        }
        ctx.wizard.state.word.translations = translations;

        if (!translations.includes(rightTranslation)) {
            await ctx.reply('–í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞. –í–µ—Å—å —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ.');
            return;
        }
        ctx.wizard.state.word.rightTranslation = rightTranslation;

        try {
            const getWord = await db.getWord(ctx.wizard.state.word.origin);
            const word = getWord.rows[0];
            if (word) {
                log.debug(`User ${ctx.from.id} tried adding word ${word.origin} that is already exists in the dataset`);
                await ctx.reply(`–°–ª–æ–≤–æ "${word.origin}" —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ.\n\n/add_word - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤.`);
            } else {
                analytics.trackWordAdded(ctx.from.id, ctx.wizard.state.word.origin);
                await db.saveWord(ctx.wizard.state.word, ctx.from.id);
                await db.updateUserWordsStats(ctx.from.id);
                await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ üíï\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add_word –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤.');
                log.info(`Word ${ctx.wizard.state.word.origin} added to the dataset. Translations: ${translations}. Right translation: ${rightTranslation}`);
            }
        } catch (error) {
            log.error(error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑');
        }
        return ctx.scene.leave();
    }
);

addWordScene.command("cancel", async (ctx) => {
    log.debug('Cancelled current command');
    await ctx.reply('–¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤—å /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.');
    return ctx.scene.leave();
});

export default addWordScene;