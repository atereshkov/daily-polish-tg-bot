import { Scenes, Markup } from 'telegraf';
import * as constants from '../constants.js';
import * as db from '../database/database.js';
import * as analytics from '../analytics/analytics.js';
import log from '../logger/logger.js';

const dailyWordScene = new Scenes.BaseScene(constants.SCENE_ID_SETUP_TRAINING);

dailyWordScene.enter((ctx) => {
    log.info(`Entered scene ${constants.SCENE_ID_SETUP_TRAINING}`);
    ctx.session.myData = {};
    const line1 = '–í–∫–ª—é—á–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ.';
    const line2 = 'üïí –ú—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É –≤ 09:00 (–ø–æ –ü–æ–ª—å—à–µ).';
    const reply = `${line1}\n${line2}`;
    return ctx.reply(reply, Markup.inlineKeyboard([
        Markup.button.callback('–Ø –≤ –¥–µ–ª–µ, –≤–∫–ª—é—á–∏—Ç—å', "ACTION_ENABLE"),
        Markup.button.callback('–Ø —Å–¥–∞—é—Å—å, –æ—Ç–∫–ª—é—á–∏—Ç—å', "ACTION_DISABLE")
    ]));
});

dailyWordScene.action('ACTION_ENABLE', async (ctx) => {
    log.debug(`Scheduler set up - ACTION_ENABLE`);
    await setUpDailyTraining(ctx, true);
    analytics.trackTrainingEnabled(tgId);
    return ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞.');
});

dailyWordScene.action('ACTION_DISABLE', async (ctx) => {
    log.debug(`Scheduler set up - ACTION_DISABLE`);
    await setUpDailyTraining(ctx, false);
    analytics.trackTrainingDisabled(tgId);
    return ctx.reply('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü–µ—á–∞–ª—å–∫–∞ :(');
});

dailyWordScene.command("cancel", async (ctx) => {
    log.info('Cancelled current command');
    await ctx.reply('–¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞.');
    return ctx.scene.leave();
});

async function setUpDailyTraining(ctx, enabled) {
    const tgId = ctx.from.id;
    const getUser = await db.getUser(tgId);
    const user = getUser.rows[0];
    if (user) {
        try {
            const getTraining = await db.getTraining(tgId);
            const training = getTraining.rows[0];
            if (training) {
                await db.updateTraining(tgId, enabled);
                log.info(`Update training ${tgId}, enabled: ${enabled}`);
            } else {
                await db.createTraining(tgId, enabled);
                log.info(`Create training ${tgId}, enabled: ${enabled}`);
            }
        } catch (error) {
            log.error(error);
            return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
        }
    } else {
        log.info(`User not found when setting up daily training ${ctx.from.id}`);
        return ctx.reply('–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /start');
    }
}

export default dailyWordScene;